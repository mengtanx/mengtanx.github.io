<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[《Java 核心技术》第 10 版速记]]></title>
    <url>%2F2018%2F07%2F09%2F%E3%80%8AJava-%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%8B%E7%AC%AC-10-%E7%89%88%E9%80%9F%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[Java 核心技术 第 10 版学习 Java 提供的所有高级特性： 面向对象程序设计 反射与代理 接口与内部类 异常处理 泛型程序设计 集合框架 并行操作 第 1 章 Java 程序设计概述Java 的设计者编写了颇有影响力的 “ 白皮书”，用来解释设计的初衷以及完成的情况，并且发布了一个简短的摘要。这个摘要可以用以下 11 个关键术语进行组织： 简单性：Java 语法是 C++ 语法的一个“纯净”版本，没有头文件、指针运算（甚至指针语法）、结构、联合、操作符重载、虚基类。简单的另一个方面是小，Java 具有一个独立的具有较小类库的 Java 微型版（Java Micro Edition），适用于嵌入式设备。 面向对象：Java 的面向对象特性与 C++ 旗鼓相当，主要不同点在于多重继承，在 Java 中，取而代之的是更简单的接口概念。并且 Java 提供了更丰富的运行时自省功能。 分布式 健壮性：Java 编译器能够检测许多在其他语言中仅在运行时才能检测出来的问题。 安全性：使用 Java 可以构建防病毒、防篡改的系统，Java 设计成能够防范各种攻击。 体系结构中立 可移植性：Java 规范中对基本数据类型的大小以及有关运算都做了明确的说明，没有“依赖具体实现”的地方。如 Java 中的 int 永远为 32 位整数，二进制数据以固定格式进行存储和传输，消除了字节顺序的困扰。字符串是用标准的 Unicode 格式存储的。 解释型：Java 解释器可以在任何移植了解释器的机构上执行 Java 字节码，开发过程可以变得更加快捷，更加具有探索性。 高性能 多线程：多线程可以带来更好的交互响应和实时行为。 动态性：从各种角度看，Java 与 C 或 C++ 相比更加具有动态性。它能够适应不断发展的环境。库中可以自由地添加新方法和实例变量，而对客户端却没有任何影响。 注释：写这本书时,白皮书可以在 www.oracle.com/technetwork/java/langenv-140151.html 上找对于 11 个关键术语的论述请参看 http://horstmann.com/corejava/java-an-interview/7Gosling.pdf。 第 2 章 Java 程序设计环境 Java 术语 第 3 章 Java 的基本程序设计结构3.1 一个简单的 Java 应用程序 关键字 public 称为访问修饰符 access modifier，用于控制程序的其他部分对这段代码的访问级别 关键字 class 表明 Java 程序中的全部内容都包含在类中。这里只是将类作为一个加载程序逻辑的容器。 Java 应用程序中的全部内容都必须放置在类中。关键字 class 后面紧跟类名，类名遵循驼峰命名法。 源代码的文件名必须与公共类的名字相同，并用 .java 作为扩展名。并且区分大小写。 需要记住：每个 Java 应用程序都必须有一个 main 方法，且必须是静态的。 3.2 注释 行注释 // 块注释 / / 文档注释 /* / 注意：在 Java 中，/ / 不能嵌套 3.3 数据类型Java 一共有 8 种基本数据类型（primitive type），包括 4 种整型，2 种浮点类型，1 中用于表示 Unicode 编码的字符单元的字符类型 char 和 1 种用于表示真值的 boolean 类型。 整型在 Java 中，整型的范围与运行 Java 代码的机器无关，解决了软件在不同平台或操作系统间移植的问题。注意：Java 没有任何无符号（unsigned）形式的 int、long、short 或 byte 类型。 int 4 字节 ≈20亿 short 2 字节 -32768-32767 long 8 字节 byte 1 字节 -128-127 长整型有一个后缀 L 或 l，十六进制数有一个前缀 0X 或 0x，八进制数有一个前缀 0，如 010 对应八进制中的 8。由于八进制表示法比较容易混淆，建议最好不要使用八进制常熟。 从 Java 7 开始，加上前缀 0b 或 0B 就可以写二进制数，如 0b1001 表示 9；还可以为数字字面量加下划线，如 1_000_000 表示一百万，这些下划线可以提升可读性。Java 编译器会去除这些下划线。 浮点型 float 4 字节，有效数字精确到 6-7 位 double 8 字节，有效数字精确到 15 位 float 类型的数值需要有一个后缀 F 或 f，没有后缀的浮点数默认为 double 类型。所有的浮点数值计算都遵循 IEEE 754 规范，具体来说，有三个用于表示移除和出错情况的三个特殊的浮点数值： 正无穷大：Double.POSITIVE_INFINITY 负无穷大：Double.NEGATIVE_INFINITY NaN（不是一个数字）：Double.NaN。可以用 Double.isNaN() 方法来检测一个特定值是否等于 Double.NaN。如计算 0/0 或者负数的平方根结果为 NaN 浮点数不适用于无法接受舍入误差的金融计算中。如果数值计算中不允许有任何舍入误差，就应该使用 BigDecimal 类。 123456// is never trueif (x == Double.NaN)// 所有“非数值”的值都认为是不相同的，可以使用 Double.isNaN 方法// check whether x is "Not a Number"if (Double.isNaN(x)) char 类型 需要注意的是，Java 中的 char 类型原本用于表示单个字符，但现在 Unicode 字符可以用一个 char 值描述，另外一些 Unicode 字符则需要两个 char 值。 char 类型的字面量值要用单引号括起来。如 &#39;A&#39; 是编码值为 65 所对应的字符常量，它与字符串 &quot;A&quot; 不同。 char 类型的值可以表示为十六进制值，其范围从 \u0000 到 \Uffff。 Java 中用于表示特殊字符的转义序列包括以下，这些都可以出现在加引号的字符字面量或字符串中。 \b 退格 \t 制表 \n 换行 \r 回车 \&quot; 双引号 \&#39; 单引号 \\ 反斜杠 特殊的，转移序列 \u 还可以出现在加引号的字符常量或字符串之外，而其他转义序列不可以。 字符需要一对代码单元表示。 char 类型是一个采用 UTF-16 编码表示 Unicode 码点的代码单元。大多数的常用 Unicode 字符使用一个代码单元就可以表示，而辅助字符需要一对代码单元表示。 12// 以下写法完全符合语法规则public static void main String \u005B \u005D args) Unicode 和 char 类型 详细解释 Java 中如何解决 Unicode 编码问题的 在 Java 中，char 类型描述了 UTF-16 编码中的一个代码单元。我们强烈建议不要在程序中使用 char 类型，除非确实需要处理 UTF-16 代码单元。最好将字符串作为抽象数据类型处理。 boolean 类型整数值和布尔值之间不能进行相互转换。 3.4 变量 声明变量的语句必须以分号结束。 可以在一行中声明多个变量，但不提倡使用这种风格，建议逐一声明每一个变量以提升程序的可读性。 变量名必须是一个以字母开头并由字母或数字构成的序列。变量名对大小写敏感的，在对两个不同的变量进行命名时，最好不要只存在大小写上的差异。 需要注意的是，与大多数程序设计语言相比，Java 中的字母和数字的范围更大。 字母包括 &#39;A&#39;~ &#39;Z&#39;, &#39;a&#39; ~ &#39;z&#39;, &#39;_&#39;, &#39;$&#39; 或在某种语言中表示字母的任何 Unicode 字符。可以使用 Character 类的 isJavaIdentifierStart 和 isJavaIdentifierPart 方法来检查。 数字包括 &#39;0&#39; ~ &#39;9&#39; 和在某种语言中表示数字的任何 Unicode 字符 但 &#39;+&#39; 和 ©这样的符号不能出现在变量名中，空格也不行。 变量名中所有的字符都是有意义的，并且大小写敏感。 变量名的长度基本上没有限制。 尽管 $ 是一个合法的 Java 字符，但不要在自己的代码中使用这个字符。它只用在 Java 编译器或其他工具生成的名字中。 另外，不能使用 Java 保留字作为变量名。 变量初始化 声明一个变量之后，必须用赋值语句对变量进行显示初始化。千万不要使用未初始化的变量，编译时出错。如 int vacationDays = 12; 虽然在 Java 中可以将声明放在代码的任何地方，但是建议在变量的声明尽可能地靠近变量第一次使用的地方，这是一种良好的程序编写风格。**Java 中不区分变量的声明与定义，在 C 和 C++ 中区分变量的声明与定义。 常量 在 Java 中，利用关键字 final 指示常量,关键字 final 表示这个变量只能被赋值一次，一旦被赋值之后，就不能再更改了。习惯上，常量名使用全大写。 在 Java 中，经常希望某个常量可以在一个类中的多个方法中出使用，通常将这些常量成为类常量。可以使用关键字 static final 设置一个类常量。 需要注意，类常量的定义位于 main 方法的外部。因此，在同一个类的其他方法中也可以使用这个常量。而且如果一个常量被声明为 public，那么其他类的方法也可以使用这个常量。 123456789101112public class Constants2&#123; public static final double CM_PER_INCH = 2.54; public static void main(String[] args) &#123; double paperWidth = 8.5; double paperHeight = 11; System.out.println("Paper size in centimeters: " + paperWidth * CM_PER_INCH + " by " + paperHeight * CM_PER_INCH); &#125;&#125; 3.5 运算符 需要注意，整数被 0 除将会产生一个异常，而浮点数被 0 除将会得到无穷大或 NaN 结果。 可以将 main 方法标记为 public static strictfp void main(String[] args)，使得 main 方法中的所有指令都将使用严格的浮点计算。如果一个类标记为 stricfp，这个类中的所有方法都要使用严格的浮点计算。 数学函数与常量 常用数学函数 Math.sqrt Math.pow Math.round Math.floorMod Math.sin Math.cos Math.tan Math.atan Math.atan2 Math.exp Math.log Math.log10 常量 Math.PI Math.E 自由发布的 Math 库（fdlibm）提供 StrictMath 类，可以确保在所有平台上得到相同的结果和完全可预测的结果。 数值类型之间的转换数值类型之间的合法转换 强制类型转换 在 Java 中，可以通过强制类型转换（cast）将浮点值的小数部分截断并转换为整型。 如果试图将一个数值从一种类型强制转换为另一种类型，而又超出了目标类型的表示范围，结果就会截断成一个完全不同的值。如 (byte)300 的实际值为 44。 **不要在 boolean 类型与任何数值类型之间进行强制类型转换，这样可以防止发生错误。只有极少数的情况下才需要将布尔类型转换为数值类型，这时候可以使用条件表达式 b ? 1 : 0结合赋值和运算符 +=, -=, *=, /=, %= 自增与自减运算符 n++ 先代入表达式计算，再加一 n-- 先代入表达式计算，再减一 ++n 先加一，再代入表达式计算 --n 先减一，再代入表达式计算 1234int m = 7;int n = 7;int a = 2 * ++m; // now a = 16, m = 8int b = 2 * n++; // now b is 14, n = 8 关系和 boolean 运算符 关系运算符：==, &lt;, &gt;, &lt;=, &gt;= 逻辑运算符：短路运算 &amp;&amp; 逻辑与 || 逻辑或 ! 逻辑非 三元操作符 ?:: condition ? expression1 : expression2 位运算符$^*$ 处理整数类型时，可以直接对组成整型数值的各个位完成操作。这意味着可以使用掩码技术得到整数中的各个位。位运算符包括： &amp; and | or ^ xor ~ not &gt;&gt; 和 &lt;&lt; 将位模式左移或右移。在需要建立位模式来完成位掩码时，这两个运算符会很方便。 &gt;&gt;&gt; 运算符会用 0 填充高位，与 &gt;&gt; 不同，它会用符号位填充高位，不存在 &lt;&lt;&lt; 运算符。 **移位运算符的右操作数要完成模 32 的运算（除非左操作数是 long 类型，在这种情况下需要对右操作数模 64）。如 1&lt;&lt;35 的值等同于 1&lt;&lt;3 或 8。 位运算符应用在布尔值上时，&amp; 和 | 也会得到一个布尔值，与 &amp;&amp; 和 || 运算符类似，不过不采用短路方式来运算。 括号和运算符级别运算符 优先级 运算符 结合性 [].() 方法调用 从左向右 ! ~ ++ -- +（一元运算）-（一元运算）()（强制类型转换） 从右向左 * / % 从左向右 + - 从左向右 &lt;&lt; &gt;&gt; &gt;&gt;&gt; 从左向右 &lt; &lt;= &gt; &gt;= instanceof 从左向右 == != 从左向右 &amp; 从左向右 ^ 从左向右 ` ` 从左向右 &amp;&amp; 从左向右 ` ` 从左向右 ?: 从右向左 = += -= *= /= &amp;= ` =^=&lt;&lt;=&gt;&gt;=&gt;&gt;&gt;=` 从右向左 枚举类型 当变量的取值只在一个有限的集合内时，可以自定义枚举类型。枚举类型包括有限个命名的值，如可以这样定义 enum Size { SMALL, MEDIUM, LARGE, EXTRA_LARGE };，之后可以声明这种类型的变量 Size s = Size.MEDIUM; Size 类型的变量智能存储这个类型声明中给定的某个枚举值，或者 null 值，null 表示这个变量没有设置任何值。 3.6 字符串 从概念上将，Java 字符串就是 Unicode 字符序列。如字符串 &quot;Java\u2122&quot; 是由 5 个 Unicode 字符 J, a, v, a 和™️ 组成的。 Java 没有内置的字符串类型，而是在标准 Java 类库中提供了一个预定义类 String。每个用双引号括起来的字符串都是 String 类的一个实例。 子串 String 类的 substring 方法可以从一个较大的字符串提取出一个子串。 substring 方法可以很容易计算出子串的长度，如字符串 s.substring(a, b) 的长度为 b-a。 拼接 Java 语言允许使用 + 连接（拼接）两个字符串。 当将一个字符串与一个非字符串的值进行拼接时，后者被转换为字符串。实际上，任何一个 Java 对象都可以被转换成字符串。 如果需要把多个字符串放在一起，用一个定界符分割，可以使用静态 join 方法。如 String all = String.join(&quot; / &quot;, &quot;S&quot;, &quot;M&quot;, &quot;L&quot;, &quot;XL&quot;); 不可变字符串 String 类没有提供用于修改字符串的方法。由于不能修改 Java 字符串中的字符，在 Java 中将 String 类对象称为不可变字符串。 不可变字符串的优点是编译器可以让字符串共享。Java 设计者认为共享带来的高效率远远胜过于提取、拼接字符串所带来的低效率。 Java 为来自于文件或键盘的单个字符或较短的字符串汇集成字符串的操作提供了一个独立的类。 检测字符串是否相等 可以使用 equals 方法检测两个字符串是否相等。如 s.equals(t) 或 &quot;Hello&quot;.equals(&quot;greeting&quot;) 可以使用 equalsIgnoreCase 方法不区分大小写的检测两个字符串是否相等 一定不要使用 == 运算符来检测两个字符串是否相等，这个运算符只能确定两个字符串是否放置在同一个位置上。 Java 中的 compareTo 方法与 C 中的 strcmp 完全类似，如 if (greeting.compareTo(&quot;Hello&quot;) == 0) 空串与 null 串 空串 &quot;&quot; 是长度为 0 的字符串，可以调用以下代码检查一个字符串是否为空：if (str.length() == 0) 或 if (str.equals(&quot;&quot;)) 空串是一个 Java 对象，有自己的串长度（0）和内容（空）。 String 类型的变量还可以存放一个特殊的值：null，这表示目前没有任何对象与该变量关联。 要检查一个字符串是否为 null，可以使用：if (str == null) 检查一个字符串既不是 null 也不为空串，可以使用：if (str != null) &amp;&amp; (str.length() != 0) 码点与代码单元$^*$Java 字符串是由 char 值序列组成。char 类型是一个采用 UTF-16 编码表示 Unicode 码点的代码单元。大多数的常用 Unicode 字符使用一个代码单元就可以表示，而辅助字符需要一对代码单元表示。 length 方法将返回采用 UTF-16 编码表示的给定字符串所需要的代码单元数量 codePointCount 方法可以得到实际的长度，即码点数量。int cpCount = greeting.codePointCount(0, greeting.length()); 调用 s.charAt(n) 将返回位置 n 的代码单元，n 介于 0 ~ s.length() - 1 之间，char first = greeting.charAt(0); // first is &#39;H&#39; 要想得到第 i 个码点，可以使用：int index = greeting.offsetByCodePoints(0, i); int cp = greeting.codePointAt(index); 1234567891011121314151617// 遍历一个字符串，依次查看每一个码点int cp = sentence.codePointAt(i);if (Character.isSupplementaryCodePoint(cp)) i += 2;else i++;// 回退操作i--;if (Character.isSurrogate(sentence.charAt(i))) i--;int cp = sentence.codePointAt(i);// 直接使用 codePoints 方法，生成一个 int 值的流，每个 int 值对应一个码点// 可以将它转换为一个数组，再完成遍历int[] codePoints = str.codePoints().toArray();// 反之，要把一个码点数组转换为一个字符串，可以使用构造函数String str = new String(codePoints, 0, codePoints.length); String APIJava 中的 String 类包含了 50 多个方法。令人惊讶的是绝大多数都很有用，使用也非常频繁。一下列出 java.lang.String 的常用方法： char charAt(int index) 返回给定位置的代码单元，*除非对底层的代码单元感兴趣，否则不需要调用这个方法。 int codePointAt(int index) 5.0 返回从给定位置开始的码点。 int offsetByCodePoints(int startIndex, int cpCount) 5.0 返回从 startIndex 代码点开始，位移 cpCount 后的码点索引。 int compareTo(String other) 按照字典顺序，如果字符串位于 other 之前，返回一个附属；反之返回一个整数；若相等，返回 0。 IntStream codePoints() 8.0 将这个字符串的码点作为一个流返回。调用 toArray 将它们放在一个数组中。 new String(int[] codePoints, int offset, int count) 5.0 用数组中从 offset 开始的 count 个码点构造一个字符串。 boolean equals(Object other) 如果字符串与 other 相等，返回 true。 boolean equalsIgnoreCase(String other) 如果字符串与 other 相等（忽略大小写），返回 true。 boolean startsWith(String prefix) boolean endsWith(String suffix) 如果字符串以 prefix 开头或 suffix 结尾，则返回 true。 int indexOf(String str) int indexOf(String str, int fromIndex) int indexOf(int cp) int indexOf(int cp, int fromIndex) 返回与字符串 str 或代码点 cp 匹配的第一个子串的开始位置。这个位置从索引 0 或 fromIndex 开始计算。如果在原始串中不存在 str，返回 -1。 int lastIndexOf(String str) int lastIndexOf(String str, int fromIndex) int lastIndexOf(int cp) int lastIndexOf(int cp, int fromIndex) 返回与字符串 str 或代码点 cp 匹配的最后一个子串的开始位置。这个位置从原始串尾端或 fromIndex 开始计算。 int length() 返回字符串的长度。 int codePointCount(int startIndex, int endIndex) 5.0 返回 startIndex 和 endIndex - 1 之间的代码点数量。没有配成对的代用字符将计入代码点。 String replace(CharSequence oldString, CharSequence newString) 返回一个新字符串。这个字符串用 newString 代替原始字符串中所有的 oldString。可以用 String 或 StringBuilder 对象作为 CharSequence 参数。 String substring(int beginIndex) String substring(int beginIndex, int endIndex) 返回一个新字符串。这个字符串包含原始字符串中从 beginIndex 到串尾或 endIndex - 1 的所有代码单元。 String toLowerCase() String toUpperCase() 返回一个新字符串。这个字符串将原始字符串中的大写/小写字母改为小写/大写字母。 String trim() 返回一个新字符串。这个字符串将删除了原始字符串头部和尾部的空格。 String join(CharSequence delimiter, CharSequence... elements) 8.0 返回一个新字符串，用给定的定界符连接所有元素。 注：CharSequence 类型的参数是一种接口类型，所有字符串都属于这个接口。 构建字符串在 JDK5.0 中，引入了 StringBuilder 类，可以将许多小段的字符串构建成一个字符串。另外 StringBuffer 类与 StringBuilder 类相同，但其效率稍有些低，允许采用多线程的方式执行添加或删除字符的操作。若所有字符串在一个单线程中编辑（通常都是这样），则建议使用 StringBuilder 类。 1234567// 构建一个空的字符串构建器StringBuilder builder = new StringBuilder();// 当每次需要添加一部分内容时，就调用 append 方法builder.append(ch); // appends a single characterbuilder.append(str); // appends a string// 当需要构建字符串时调用 toString 方法就可以得到一个 String 对象，其中包含了构建器中的字符序列String completedString = builder.toString(); StringBuilder 类中的重要方法： StringBuilder() 构造一个空的字符串构建器。 int length() 返回构建器或缓冲器中的代码单元数量。 StringBuilder append(String str) 追加一个字符串并返回 this。 StringBuilder append(char c) 追加一个代码单元并返回 this。 StringBuilder appendCodePoint(int cp) 追加一个代码点，并将其转换为一个或两个代码单元并返回 this。 void setCharAt(int i, char c) 将第 i 个代码单元设置为 c。 StringBuilder insert(int offset, String str) 在 offset 位置插入一个字符串并返回 this。 StringBuilder insert(int offset, Char c) 在 offset 位置插入一个代码单元并返回 this。 StringBuilder delete(int startIndex, int endIndex) 删除偏移量从 startIndex 到 endIndex - 1 的代码单元并返回 this。 String toString() 返回一个与构建器或缓冲器内容相同的字符串。 3.7 输入输出读取输入123456789101112131415161718192021222324252627import java.util.*;/** * This program demonstrates console input. * @version * @author * @date */ public class InputTest &#123; public static void main(String[] args) &#123; // 需要构造一个 Scanner 对象，并与标准输入流 System.in 关联 Scanner in = new Scanner(System.in); // get first input System.out.print("What is your name? "); String name = in.nextLine(); // get second input System.out.print("How old are you? "); int age = in.nextInt(); // 读取浮点数调用 nextDouble 方法 // display output on console System.out.println("Hello, " + name + ", Next year, you'll be " + (age + 1)); &#125; &#125; Scanner 类的输入是可见的，不适用于从控制台读取密码。Java SE 6 引入了 Console 类来实现这个目的。为了安全起见，返回的密码存放在一维字符数组中，而不是字符串中。在对密码进行处理后，应该马上用一个填充值覆盖数组元素。采用 Console 对象处理输入不如 Scanner 方便，每次只能读取一行输入，而没有能够读取一个单词或一个数值的方法。 123Console cons = System.console();String username = cons.readLine("User name: ");char[] password = cons.readPassword("Password: "); 了解 java.util.Scanner 类 5.0 了解 java.lang.System 类 1.0 了解 java.io.Console 类 6.0 格式化输出文件输入与输出3.8 控制流程块作用域条件语句循环确定循环多重选择：switch 语句中断控制流程语句 break3.9 大数值3.10 数组for each 循环数组初始化以及匿名数组数组拷贝命令行参数数组排序多维数组不规则数组 第 4 章 对象与类4.1 面向对象程序设计概述4.2 使用预定义类4.3 用户自定义类4.4 静态域与静态方法4.5 方法参数4.6 对象构造4.7 包4.8 类路径4.9 文档注释4.10 类设计技巧 第 5 章 继承5.1 类、超类和子类5.2 Object：所有类的超类5.3 泛型数组列表5.4 对象包装器与自动装箱5.5 参数数量可变的方法5.6 枚举类5.7 反射5.8 继承的设计技巧 第 6 章 接口、lambda 表达式与内部类6.1 接口6.2 接口示例6.3 lambda 表达式6.4 内部类6.5 代理 第 7 章 异常、断言和日志7.1 处理错误7.2 捕获异常7.3 使用异常机制的技巧7.4 使用断言7.5 记录日志7.6 调试技巧 第 8 章 泛型程序设计8.1 为什么要使用泛型程序设计8.2 定义简单泛型类8.3 泛型方法8.4 类型变量的限定8.5 泛型代码和虚拟机8.6 约束与局限性8.7 泛型类型的集成规则8.8 通配符类型8.9 反射和泛型 第 9 章 集合9.1 Java 集合框架9.2 具体的集合9.3 映射9.4 视图与包装器9.5 算法9.6 遗留的集合 第 13 章 部署 Java 应用程序13.1 JAR 文件13.2 应用首选项的存储13.3 服务加载器13.4 applet13.5 Java Web Start 第 14 章 并发14.1 什么事线程14.2 中断线程14.3 线程状态14.4 线程属性14.5 同步14.6 阻塞队列14.7 线程安全的集合14.8 Callable 与 Future14.9 执行器14.10 同步器14.11 线程与 Swing 附录 A Java 关键字]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【转】提问的智慧]]></title>
    <url>%2F2018%2F07%2F05%2F%E3%80%90%E8%BD%AC%E3%80%91%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7%2F</url>
    <content type="text"><![CDATA[转载一篇关于提问的经典文章，简体中文翻译版原文请参考 GitHub Repo，英文原版请参考 How to Ask Questions The Smart Way. 简介在黑客的世界里，当你拋出一个技术问题时，最终是否能得到有用的回答，往往取决于你所提问和追问的方式。本指南将教你如何正确的提问以获得你满意的答案。 不只是黑客，现在开放源代码（Open Source）软件已经相当盛行，你常常也可以由其他有经验的使用者身上得到好答案，这是件_好事_；使用者比起黑客来，往往对那些新手常遇到的问题更宽容一些。然而，将有经验的使用者视为黑客，并采用本指南所提的方法与他们沟通，同样也是能从他们身上得到满意回答的最有效方式。 首先你应该明白，黑客们喜爱有挑战性的问题，或者能激发我们思维的好问题。如果我们并非如此，那我们也不会成为你想询问的对象。如果你给了我们一个值得反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼。好问题可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，”好问题！”是诚挚的大力称赞。 尽管如此，黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。 我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 -– 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为 失败者（撸瑟） （由于历史原因，我们有时把它拼作 lusers）。 我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，电脑只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做。我们了解这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。尽管如此，我们回答问题的风格是指向那些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就是在降低做自己最擅长的事情上的效率。 我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情的滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效的利用时间来回答 赢家（winner）的问题。 如果你厌恶我们的态度，高高在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 – 事实上，我们大多数人非常乐意与你平等地交流，只要你付出小小努力来满足基本要求，我们就会欢迎你加入我们的文化。但让我们帮助那些不愿意帮助自己的人是没有效率的。无知没有关系，但装白痴就是不行。 所以，你不必在技术上很在行才能吸引我们的注意，但你必须表现出能引导你变得在行的特质 – 机敏、有想法、善于观察、乐于主动参与解决问题。如果你做不到这些使你与众不同的事情，我们建议你花点钱找家商业公司签个技术支持服务合同，而不是要求黑客个人无偿地帮助你。 如果你决定向我们求助，当然你也不希望被视为失败者，更不愿成为失败者中的一员。能立刻得到快速并有效答案的最好方法，就是像赢家那样提问 – 聪明、自信、有解决问题的思路，只是偶尔在特定的问题上需要获得一点帮助。 （欢迎对本指南提出改进意见。你可以 email 你的建议至 esr@thyrsus.com 或 respond-auto@linuxmafia.com。然而请注意，本文并非网络礼节的通用指南，而我们通常会拒绝无助于在技术论坛得到有用答案的建议。） 在提问之前在你准备要通过电子邮件、新闻群组或者聊天室提出技术问题前，请先做到以下事情： 尝试在你准备提问的论坛的旧文章中搜索答案。 尝试上网搜索以找到答案。 尝试阅读手册以找到答案。 尝试阅读常见问题文件（FAQ）以找到答案。 尝试自己检查或试验以找到答案 向你身边的强者朋友打听以找到答案。 如果你是程序开发者，请尝试阅读源代码以找到答案 当你提出问题的时候，请先表明你已经做了上述的努力；这将有助于树立你并不是一个不劳而获且浪费别人的时间的提问者。如果你能一并表达在做了上述努力的过程中所_学到_的东西会更好，因为我们更乐于回答那些表现出能从答案中学习的人的问题。 运用某些策略，比如先用Google搜索你所遇到的各种错误信息（既搜索Google论坛，也搜索网页），这样很可能直接就找到了能解决问题的文件或邮件列表线索。即使没有结果，在邮件列表或新闻组寻求帮助时加上一句 我在Google中搜过下列句子但没有找到什么有用的东西 也是件好事，即使它只是表明了搜索引擎不能提供哪些帮助。这么做（加上搜索过的字串）也让遇到相似问题的其他人能被搜索引擎引导到你的提问来。 别着急，不要指望几秒钟的Google搜索就能解决一个复杂的问题。在向专家求助之前，再阅读一下常见问题文件（FAQ）、放轻松、坐舒服一些，再花点时间思考一下这个问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑拋出，只因你的第一次搜索没有找到答案（或者找到太多答案）。 准备好你的问题，再将问题仔细的思考过一遍，因为草率的发问只能得到草率的回答，或者根本得不到任何答案。越是能表现出在寻求帮助前你为解决问题所付出的努力，你越有可能得到实质性的帮助。 小心别问错了问题。如果你的问题基于错误的假设，某个普通黑客（J. Random Hacker）多半会一边在心里想着蠢问题…， 一边用无意义的字面解释来答复你，希望着你会从问题的回答（而非你想得到的答案）中汲取教训。 绝不要自以为_够格_得到答案，你没有；你并没有。毕竟你没有为这种服务支付任何报酬。你将会是自己去_挣到_一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题 –一个有潜力能贡献社区经验的问题，而不仅仅是被动的从他人处索取知识。 另一方面，表明你愿意在找答案的过程中做点什么是一个非常好的开端。谁能给点提示？、我的这个例子里缺了什么？以及我应该检查什么地方比请把我需要的确切的过程贴出来更容易得到答复。因为你表现出只要有人能指个正确方向，你就有完成它的能力和决心。 当你提问时慎选提问的论坛小心选择你要提问的场合。如果你做了下述的事情，你很可能被忽略掉或者被看作失败者： 在与主题不合的论坛上贴出你的问题 在探讨进阶技术问题的论坛张贴非常初级的问题；反之亦然 在太多的不同新闻群组上重复转贴同样的问题（cross-post） 向既非熟人也没有义务解决你问题的人发送私人电邮 黑客会剔除掉那些搞错场合的问题，以保护他们沟通的渠道不被无关的东西淹没。你不会想让这种事发生在自己身上的。 因此，第一步是找到对的论坛。再说一次，Google和其它搜索引擎还是你的朋友，用它们来找到与你遭遇到困难的软硬件问题最相关的网站。通常那儿都有常见问题（FAQ）、邮件列表及相关说明文件的链接。如果你的努力（包括_阅读_FAQ）都没有结果，网站上也许还有报告Bug（Bug-reporting）的流程或链接，如果是这样，连过去看看。 向陌生的人或论坛发送邮件最可能是风险最大的事情。举例来说，别假设一个提供丰富内容的网页的作者会想充当你的免费顾问。不要对你的问题是否会受到欢迎做太乐观的估计 – 如果你不确定，那就向别处发送，或者压根别发。 在选择论坛、新闻群组或邮件列表时，别太相信名字，先看看FAQ或者许可书以弄清楚你的问题是否切题。发文前先翻翻已有的话题，这样可以让你感受一下那里的文化。事实上，事先在新闻组或邮件列表的历史记录中搜索与你问题相关的关键词是个极好的主意，也许这样就找到答案了。即使没有，也能帮助你归纳出更好的问题。 别像机关枪似的一次”扫射”所有的帮助渠道，这就像大喊大叫一样会使人不快。要一个一个地来。 搞清楚你的主题！最典型的错误之一是在某种致力于跨平台可移植的语言、套件或工具的论坛中提关于Unix或Windows操作系统程序界面的问题。如果你不明白为什么这是大错，最好在搞清楚这之间差异之前什么也别问。 一般来说，在仔细挑选的公共论坛中提问，会比在私有论坛中提同样的问题更容易得到有用的回答。有几个理由可以支持这点，一是看潜在的回复者有多少，二是看观众有多少。黑客较愿意回答那些能帮助到许多人的问题。 可以理解的是，老练的黑客和一些热门软件的作者正在接受过多的错发信息。就像那根最后压垮骆驼背的稻草一样，你的加入也有可能使情况走向极端 – 已经好几次了，一些热门软件的作者从自己软件的支持中抽身出来，因为伴随而来涌入其私人邮箱的无用邮件变得无法忍受。 Stack Overflow搜索，_然后_ 在 Stack Exchange 问。 近年来，Stack Exchange community 社区已经成为回答技术及其他问题的主要渠道，尤其是那些开放源码的项目。 因为 Google 索引是即时的，在看 Stack Exchange 之前先在 Google 搜索。有很高的机率某人已经问了一个类似的问题，而且 Stack Exchange 网站们往往会是搜索结果中最前面几个。如果你在 Google 上没有找到任何答案，你再到特定相关主题的网站去找。用标签（Tag）搜索能让你更缩小你的搜索结果。 Stack Exchange 已经成长到超过一百个网站，以下是最常用的几个站： Super User 是问一些通用的电脑问题，如果你的问题跟代码或是写程序无关，只是一些网络连线之类的，请到这里。 Stack Overflow 是问写程序有关的问题。 Server Fault 是问服务器和网管相关的问题。 网站和IRC论坛本地的使用者群组（user group），或者你所用的 Linux 发行版本也许正在宣传他们的网页论坛或 IRC 频道，并提供新手帮助（在一些非英语国家，新手论坛很可能还是邮件列表）， 这些地方是开始提问的好首选，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。经过宣传的 IRC 频道是公开欢迎提问的地方，通常可以即时得到回应。 事实上，如果程序出的问题只发生在特定 Linux 发行版提供的版本（这很常见），最好先去该发行版的论坛或邮件列表中提问，再到程序本身的论坛或邮件列表提问。（否则）该项目的黑客可能仅仅回复 “用我们的版本”。 在任何论坛发文以前，先确认一下有没有搜索功能。如果有，就试着搜索一下问题的几个关键词，也许这会有帮助。如果在此之前你已做过通用的网页搜索（你也该这样做），还是再搜索一下论坛，搜索引擎有可能没来得及索引此论坛的全部内容。 通过论坛或 IRC 频道来提供使用者支持服务有增长的趋势，电子邮件则大多为项目开发者间的交流而保留。所以最好先在论坛或 IRC 中寻求与该项目相关的协助。 第二步，使用项目邮件列表当某个项目提供开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答你的问题。查一查项目的文件和首页，找到项目的邮件列表并使用它。有几个很好的理由支持我们采用这种办法： 任何好到需要向个别开发者提出的问题，也将对整个项目群组有益。反之，如果你认为自己的问题对整个项目群组来说太愚蠢，也不能成为骚扰个别开发者的理由。 向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导人）也许太忙以至于没法回答你的问题。 大多数邮件列表都会被存档，那些被存档的内容将被搜索引擎索引。如果你向列表提问并得到解答，将来其它人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。 如果某些问题经常被问到，开发者可以利用此信息来改进说明文件或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。 如果一个项目既有”使用者” 也有”开发者”（或”黑客”）邮件列表或论坛，而你又不会动到那些源代码，那么就向”使用者”列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会将你的提问视为干扰他们开发的噪音。 然而，如果你_确信_你的问题很特别，而且在”使用者” 列表或论坛中几天都没有回复，可以试试前往”开发者”列表或论坛发问。建议你在张贴前最好先暗地里观察几天以了解那里的行事方式（事实上这是参与任何私有或半私有列表的好主意） 如果你找不到一个项目的邮件列表，而只能查到项目维护者的电子邮件地址，尽管向他发信。即使是在这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中，请陈述你已经试过但没有找到合适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。 使用有意义且描述明确的标题在邮件列表、新闻群组或论坛中，大约50字以内的标题是抓住资深专家注意力的好机会。别用喋喋不休的帮帮忙、跪求、急（更别说救命啊！！！！这样让人反感的话，用这种标题会被条件反射式地忽略）来浪费这个机会。不要妄想用你的痛苦程度来打动我们，而是在这点空间中使用极简单扼要的描述方式来提出问题。 一个好标题范例是目标 -- 差异式的描述，许多技术支持组织就是这样做的。在目标部分指出是哪一个或哪一组东西有问题，在差异部分则描述与期望的行为不一致的地方。 蠢问题：救命啊！我的笔电不能正常显示了！ 聪明问题：X.org 6.8.1的鼠标游标会变形，某牌显卡 MV1005 芯片组。 更聪明问题：X.org 6.8.1的鼠标游标，在某牌显卡 MV1005 芯片组环境下 - 会变形。 编写目标 -- 差异 式描述的过程有助于你组织对问题的细緻思考。是什么被影响了？ 仅仅是鼠标游标或者还有其它图形？只在 X.org 的 X 版中出现？或只是出现在6.8.1版中？ 是针对某牌显卡芯片组？或者只是其中的 MV1005 型号？ 一个黑客只需瞄一眼就能够立即明白你的环境_和_你遇到的问题。 总而言之，请想像一下你正在一个只显示标题的存档讨论串（Thread）索引中查寻。让你的标题更好地反映问题，可使下一个搜索类似问题的人能够关注这个讨论串，而不用再次提问相同的问题。 如果你想在回复中提出问题，记得要修改内容标题，以表明你是在问一个问题， 一个看起来像 Re: 测试 或者 Re: 新bug 的标题很难引起足够重视。另外，在不影响连贯性之下，适当引用并删减前文的内容，能给新来的读者留下线索。 对于讨论串，不要直接点击回复来开始一个全新的讨论串，这将限制你的观众。因为有些邮件阅读程序，比如 mutt ，允许使用者按讨论串排序并通过折叠讨论串来隐藏消息，这样做的人永远看不到你发的消息。 仅仅改变标题还不够。mutt 和其它一些邮件阅读程序还会检查邮件标题以外的其它信息，以便为其指定讨论串。所以宁可发一个全新的邮件。 在网页论坛上，好的提问方式稍有不同，因为讨论串与特定的信息紧密结合，并且通常在讨论串外就看不到里面的内容，故通过回复提问，而非改变标题是可接受的。不是所有论坛都允许在回复中出现分离的标题，而且这样做了基本上没有人会去看。不过，通过回复提问，这本身就是暧昧的做法，因为它们只会被正在查看该标题的人读到。所以，除非你_只想_在该讨论串当前活跃的人群中提问，不然还是另起炉灶比较好。 使问题容易回复以请将你的回复寄到……来结束你的问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟思考你的问题更麻烦。如果你的邮件程序不支持这样做，换个好点的；如果是操作系统不支持这种邮件程序，也换个好点的。 在论坛，要求通过电子邮件回复是非常无礼的，除非你相信回复的信息可能比较敏感（而且有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复讨论串时得到电子邮件提醒，可以要求网页论坛发送给你。几乎所有论坛都支持诸如追踪此讨论串、有回复时发送邮件提醒等功能。 用清晰、正确、精准并语法正确的语句我们从经验中发现，粗心的提问者通常也会粗心的写程序与思考（我敢打包票）。回答粗心大意者的问题很不值得，我们宁愿把时间耗在别处。 正确的拼字、标点符号和大小写是很重要的。一般来说，如果你觉得这样做很麻烦，不想在乎这些，那我们也觉得麻烦，不想在乎你的提问。花点额外的精力斟酌一下字句，用不着太僵硬与正式 – 事实上，黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它必须很准确，而且有迹象表明你是在思考和关注问题。 正确地拼写、使用标点和大小写，不要将its混淆为it&#39;s，loose搞成lose或者将discrete弄成discreet。不要全部用大写，这会被视为无礼的大声嚷嚷（全部小写也好不到哪去，因为不易阅读。Alan Cox也许可以这样做，但你不行。） 更白话的说，如果你写得像是个半文盲[译注：小白]），那多半得不到理睬。也不要使用即时通讯中的简写或火星文，如将的简化为ㄉ会使你看起来像一个为了少打几个键而省字的小白。更糟的是，如果像个小孩似地鬼画符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。 如果在使用非母语的论坛提问，你可以犯点拼写和语法上的小错，但决不能在思考上马虎（没错，我们通常能弄清两者的分别）。同时，除非你知道回复者使用的语言，否则请使用英语书写。繁忙的黑客一般会直接删除用他们看不懂语言写的消息。在网络上英语是通用语言，用英语书写可以将你的问题在尚未被阅读就被直接删除的可能性降到最低。 如果英文是你的外语（Second language），提示潜在回复者你有潜在的语言困难是很好的：[译注：以下附上原文以供使用] English is not my native language; please excuse typing errors. 英文不是我的母语，请原谅我的错字或语法 If you speak $LANGUAGE, please email/PM me;I may need assistance translating my question. 如果你说某语言，请寄信/私讯给我；我需要有人协助我翻译我的问题 I am familiar with the technical terms,but some slang expressions and idioms are difficult for me. 我对技术名词很熟悉，但对于俗语或是特别用法比较不甚了解。 I’ve posted my question in $LANGUAGE and English.I’ll be glad to translate responses, if you only use one or the other. 我把我的问题用某语言和英文写出来，如果你只用一种语言回答，我会乐意将其翻译成另一种。 使用易于读取且标准的文件格式发送问题如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以： 使用纯文字而不是HTML (关闭HTML并不难） 使用MIME附件通常是可以的，前提是真正有内容（譬如附带的源代码或patch），而不仅仅是邮件程序生成的模板（譬如只是信件内容的拷贝）。 不要发送一段文字只是单行句子但多次断行的邮件（这使得回复部分内容非常困难）。设想你的读者是在80个字符宽的终端机上阅读邮件，最好设置你的断行点小于80字。 但是，也_不要_用任何固定断行资料（譬如日志档案拷贝或会话记录）。档案应该原样包含，让回复者有信心他们看到的是和你看到的一样的东西。 在英语论坛中，不要使用Quoted-Printable MIME编码发送消息。这种编码对于张贴非ASCII语言可能是必须的，但很多邮件程序并不支持这种编码。当它们分断时，那些文本中四处散布的=20符号既难看也分散注意力，甚至有可能破坏内容的语意。 绝对，_永远_不要指望黑客们阅读使用封闭格式编写的文档，像是微软公司的Word或Excel文件等。大多数黑客对此的反应就像有人将还在冒热气的猪粪倒在你门口阶梯上时你的反应一样。即便他们能够处理，他们也很厌恶这么做。 如果你从使用Windows的电脑发送电子邮件，关闭微软愚蠢的智能引号功能 （从[选项] &gt; [校订] &gt; [自动校正选项], 按掉智能引号单选框），以免在你的邮件中到处散布垃圾字符。 在论坛，勿滥用表情符号和HTML功能（当它们提供时）。一两个表情符号通常没有问题，但花哨的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来像个傻笑的小姑娘。这通常不是个好主意，除非你只是对sex而不是有用的回复更有兴趣。 如果你使用图形用户界面的邮件程序（如微软公司的Outlook或者其它类似的），注意它们的默认设置不一定满足这些要求。大多数这类程序有基于选单的查看源代码命令，用它来检查发送文件夹中的消息，以确保发送的是没有多余杂质的纯文本文件。 精确的描述问题并言之有物 仔细、清楚地描述你的问题或Bug的症状。 描述问题发生的环境（机器配置、操作系统、应用程序、以及相关的信息），提供经销商的发行版和版本号（如：Fedora Core 4、Slackware 9.1等）。 描述在提问前你是怎样去研究和理解这个问题的。 描述在提问前为确定问题而采取的诊断步骤。 描述最近做过什么可能相关的硬件或软件变更。 尽可能的提供一个可以重现这个问题的既定环境的方法 尽量去揣测一个黑客会怎样反问你，在他提问的时候预先给他答案。 以上几点中，当你报告的是你认为可能在代码中的问题时，给黑客一个可以重现你的问题的环境尤其重要。当你这么做时，你得到有效的回答的机会和速度都会大大的提升。 Simon Tatham写过一篇名为《如何有效的报告Bug》的出色文章。强力推荐你也读一读。 话不在多而在精你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。 这样做的用处至少有三点。第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加；第二，简化问题使你更有可能得到_有用_的答案；第三，在精炼你的bug报告的过程中，你很可能就自己找到了解决方法或权宜之计。 别动辄声称找到 Bug当你在使用软件中遇到问题，除非你非常、_非常_的有根据，不要动辄声称找到了Bug。提示：除非你能提供解决问题的源代码补丁，或者对前一版本的回归测试表现出不正确的行为，否则你都多半不够完全确信。这同样适用在网页和文件，如果你（声称）发现了文件的Bug，你应该能提供相应位置的修正或替代文件。 请记得，还有许多其它使用者没遇到你发现的问题，否则你在阅读文件或搜索网页时就应该发现了（你在抱怨前已经做了这些，是吧？）。这也意味着很有可能是你弄错了而不是软件本身有问题。 编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了Bug，也就是在质疑他们的能力，即使你是对的，也有可能会冒犯到其中某部分人。这尤其严重当你在标题中嚷嚷着有Bug。 提问时，即使你私下非常确信已经发现一个真正的Bug，最好写得像是_你_做错了什么。如果真的有Bug，你会在回复中看到这点。这样做的话，如果真有Bug，维护者就会向你道歉，这总比你惹恼别人然后欠别人一个道歉要好一点。 可以低声下气，但还是要先做功课有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一个极端 – 低声下气：我知道我只是个可悲的新手，一个撸瑟，但...。这既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描述时更令人反感。 别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清楚地描述背景条件和你的问题情况。这比低声下气更好地定位了你的位置。 有时网页论坛会设有专为新手提问的版面，如果你真的认为遇到了初学者的问题，到那去就是了，但一样别那么低声下气。 描述问题症状而非猜测告诉黑客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还用向别人求助吗？），因此要确信你原原本本告诉了他们问题的症状，而不是你的解释和理论；让黑客们来推测和诊断。如果你认为陈述自己的猜测很重要，清楚地说明这只是你的猜测，并描述为什么它们不起作用。 蠢问题 我在编译内核时接连遇到 SIG11 错误，我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？ 聪明问题 我的组装电脑是 FIC-PA2007 主机板搭载 AMD K6/233 CPU（威盛 Apollo VP2芯片组），256MB Corsair PC133 SDRAM内存，在编译内核时，从开机20分钟以后就频频产生 SIG11 错误，但是在头20分钟内从没发生过相同的问题。重新启动也没有用，但是关机一晚上就又能工作20分钟。所有内存都换过了，没有效果。相关部分的标准编译记录如下…。 由于以上这点似乎让许多人觉得难以配合，这里有句话可以提醒你：所有的诊断专家都来自密苏里州。 美国国务院的官方座右铭则是：让我看看（出自国会议员 Willard D. Vandiver 在1899年时的讲话：我来自一个出产玉米，棉花，牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。） 针对诊断者而言，这并不是一种怀疑，而只是一种真实而有用的需求，以便让他们看到的是与你看到的原始证据尽可能一致的东西，而不是你的猜测与归纳的结论。所以，大方的展示给我们看吧！ 按发生时间先后列出问题症状问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行脚本工具所生成的），并引用相关的若干行（如20行）记录会非常有帮助。 如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住，多不等于好。试着选取适当的调试级别以便提供有用的信息而不是让读者淹没在垃圾中。 如果你的说明很长（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样黑客们在读你的记录时就知道该注意哪些内容了。 描述目标而不是过程如果你想弄清楚如何做某事（而不是报告一个Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。 经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。 蠢问题 我怎样才能从某绘图程序的颜色选择器中取得十六进制的的RGB值？ 聪明问题 我正试着用替换一幅图片的色码成自己选定的色码，我现在知道的唯一方法是编辑每个色码区块，但却无法从某绘图程序的颜色选择器取得十六进制的的RGB值。 第二种提问法比较聪明，你可能得到像是建议采用另一个更合适的工具的回复。 别要求使用私人电邮回复黑客们认为问题的解决过程应该公开、透明，此过程中如果更有经验的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为提供帮助者也能因为能力和学识被其它同行看到而得到某种奖励。 当你要求私下回复时，这个过程和奖励都被中止。别这样做，让回复者来决定是否私下回答 – 如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于对其它人没有兴趣。 这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么这个神奇的提问句会是向我发电邮，我将为论坛归纳这些回复。试着将邮件列表或新闻群组从洪水般的雷同回复中解救出来是非常有礼貌的 – 但你必须信守诺言。 清楚明确的表达你的问题以及需求漫无边际的提问近乎无休无止的时间黑洞。最有可能给你有用答案的人通常也正是最忙的人（他们忙是因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞相当厌恶，所以他们也倾向于厌恶那些漫无边际的提问。 如果你明确表述需要回答者做什么（如提供指点、发送一段代码、检查你的补丁、或是其他等等），就最有可能得到有用的答案。因为这会定出一个时间和精力的上限，便于回答者能集中精力来帮你。这么做很棒。 要理解专家们所处的世界，请把专业技能想像为充裕的资源，而回复的时间则是稀缺的资源。你要求他们奉献的时间越少，你越有可能从真正专业而且很忙的专家那里得到解答。 所以，界定一下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你有用答案相当有帮助 – 但这技巧通常和简化问题有所区别。因此，问我想更好的理解X，可否指点一下哪有好一点说明？通常比问你能解释一下X吗？更好。如果你的代码不能运作，通常请别人看看哪里有问题，比要求别人替你改正要明智得多。 询问有关代码的问题时别要求他人帮你有问题的代码调试而不提示一下应该从何入手。张贴几百行的代码，然后说一声：它不会动会让你完全被忽略。只贴几十行代码，然后说一句：在第七行以后，我期待它显示 &lt;x&gt;，但实际出现的是 &lt;y&gt;比较有可能让你得到回应。 最有效描述程序问题的方法是提供最精简的Bug展示测试示例（bug-demonstrating test case）。什么是最精简的测试示例? 那是问题的缩影；一小个程序片段能刚好展示出程序的异常行为，而不包含其他令人分散注意力的内容。怎么制作最精简的测试示例？如果你知道哪一行或哪一段代码会造成异常的行为，复制下来并加入足够重现这个状况的代码（例如，足以让这段代码能被编译/直译/被应用程序处理）。如果你无法将问题缩减到一个特定区块，就复制一份代码并移除不影响产生问题行为的部分。总之，测试示例越小越好（查看话不在多而在精一节）。 一般而言，要得到一段相当精简的测试示例并不太容易，但永远先尝试这样做的是种好习惯。这种方式可以帮助你了解如何自行解决这个问题 —- 而且即使你的尝试不成功，黑客们也会看到你在尝试取得答案的过程中付出了努力，这可以让他们更愿意与你合作。 如果你只是想让别人帮忙审查（Review）一下代码，在信的开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。 别把自己家庭作业的问题贴上来黑客们很擅长分辨哪些问题是家庭作业式的问题；因为我们中的大多数都曾自己解决这类问题。同样，这些问题得由_你_来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。 如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在使用者群组，论坛或（最后一招）在项目的使用者邮件列表或论坛中提问。尽管黑客们_会_看出来，但一些有经验的使用者也许仍会给你一些提示。 去掉无意义的提问句避免用无意义的话结束提问，例如有人能帮我吗？或者这有答案吗？。 首先：如果你对问题的描述不是很好，这样问更是画蛇添足。 其次：由于这样问是画蛇添足，黑客们会很厌烦你 – 而且通常会用逻辑上正确，但毫无意义的回答来表示他们的蔑视， 例如：没错，有人能帮你或者不，没答案。 一般来说，避免用 是或否、对或错、有或没有类型的问句，除非你想得到是或否类型的回答。 即使你很急也不要在标题写紧急这是你的问题，不是我们的。宣称紧急极有可能事与愿违：大多数黑客会直接删除无礼和自私地企图即时引起关注的问题。更严重的是，紧急这个字（或是其他企图引起关注的标题）通常会被垃圾信过滤器过滤掉 – 你希望能看到你问题的人可能永远也看不到。 有半个例外的情况是，如果你是在一些很高调，会使黑客们兴奋的地方，也许值得这样去做。在这种情况下，如果你有时间压力，也很有礼貌地提到这点，人们也许会有兴趣回答快一点。 当然，这风险很大，因为黑客们兴奋的点多半与你的不同。譬如从 NASA 国际空间站（International Space Station）发这样的标题没有问题，但用自我感觉良好的慈善行为或政治原因发肯定不行。事实上，张贴诸如紧急：帮我救救这个毛绒绒的小海豹！肯定让你被黑客忽略或惹恼他们，即使他们认为毛绒绒的小海豹很重要。 如果你觉得这点很不可思议，最好再把这份指南剩下的内容多读几遍，直到你弄懂了再发文。 礼多人不怪，而且有时还很有帮助彬彬有礼，多用请和谢谢您的关注，或谢谢你的关照。让大家都知道你对他们花时间免费提供帮助心存感激。 坦白说，这一点并没有比清晰、正确、精准并合法语法和避免使用专用格式重要（也不能取而代之）。黑客们一般宁可读有点唐突但技术上鲜明的Bug报告，而不是那种有礼但含糊的报告。（如果这点让你不解，记住我们是按问题能教我们什么来评价问题的价值的） 然而，如果你有一串的问题待解决，客气一点肯定会增加你得到有用回应的机会。 （我们注意到，自从本指南发布后，从资深黑客那里得到的唯一严重缺陷反馈，就是对预先道谢这一条。一些黑客觉得先谢了意味着事后就不用再感谢任何人的暗示。我们的建议是要么先说先谢了，_然后_事后再对回复者表示感谢，或者换种方式表达感激，譬如用谢谢你的关注或谢谢你的关照。） 问题解决后，加个简短的补充说明问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。 最理想的方式是向最初提问的话题回复此消息，并在标题中包含已修正，已解决或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见讨论串问题 X和问题的X - 已解决的潜在回复者就明白不用再浪费时间了（除非他个人觉得问题 X的有趣），因此可以利用此时间去解决其它问题。 补充说明不必很长或是很深入；简单的一句你好，原来是网线出了问题！谢谢大家 – Bill比什么也不说要来的好。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇大论更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。 对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题，在此_之后_才指明可以避免的盲点。避免盲点的部分应放在正确的解决方案和其它总结材料之后，而不要将此信息搞成侦探推理小说。列出那些帮助过你的名字，会让你交到更多朋友。 除了有礼貌和有内涵以外，这种类型的补充也有助于他人在邮件列表/新闻群组/论坛中搜索到真正解决你问题的方案，让他们也从中受益。 至少，这种补充有助于让每位参与协助的人因问题的解决而从中得到满足感。如果你自己不是技术专家或者黑客，那就相信我们，这种感觉对于那些你向他们求助的大师或者专家而言，是非常重要的。问题悬而未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次提问时尝到甜头。 思考一下怎样才能避免他人将来也遇到类似的问题，自问写一份文件或加个常见问题（FAQ）会不会有帮助。如果是的话就将它们发给维护者。 在黑客中，这种良好的后继行动实际上比传统的礼节更为重要，也是你如何透过善待他人而赢得声誉的方式，这是非常有价值的资产。 如何解读答案 RTFM和STFW：如何知道你已完全搞砸了有一个古老而神圣的传统：如果你收到RTFM （Read The Fucking Manual）的回应，回答者认为你应该去读他妈的手册。当然，基本上他是对的，你应该去读一读。 RTFM 有一个年轻的亲戚。如果你收到STFW（Search The Fucking Web）的回应，回答者认为你应该到他妈的网上搜索过了。那人多半也是对的，去搜索一下吧。（更温和一点的说法是 Google是你的朋友！） 在论坛，你也可能被要求去爬爬论坛的旧文。事实上，有人甚至可能热心地为你提供以前解决此问题的讨论串。但不要依赖这种关照，提问前应该先搜索一下旧文。 通常，用这两句之一回答你的人会给你一份包含你需要内容的手册或者一个网址，而且他们打这些字的时候也正在读着。这些答复意味着回答者认为 你需要的信息非常容易获得； 你自己去搜索这些信息比灌给你能让你学到更多。 你不应该因此不爽；依照黑客的标准，他已经表示了对你一定程度的关注，而没有对你的要求视而不见。你应该对他祖母般的慈祥表示感谢。 如果还是搞不懂如果你看不懂回应，别立刻要求对方解释。像你以前试着自己解决问题时那样（利用手册，FAQ，网络，身边的高手），先试着去搞懂他的回应。如果你真的需要对方解释，记得表现出你已经从中学到了点什么。 比方说，如果我回答你：看来似乎是 zentry 卡住了；你应该先清除它。，然后，这是一个很糟的后续问题回应：zentry是什么？ _好_的问法应该是这样：哦~~~我看过说明了但是只有 -z 和 -p 两个参数中提到了 zentries，而且还都没有清楚的解释如何清除它。你是指这两个中的哪一个吗？还是我看漏了什么？ 处理无礼的回应很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直接了当，一针见血式的交流风格，这种风格更注重解决问题，而不是使人感觉舒服而却模模糊糊。 如果你觉得被冒犯了，试着平静地反应。如果有人真的做了出格的事，邮件列表、新闻群组或论坛中的前辈多半会招呼他。如果这_没有_发生而你却发火了，那么你发火对象的言语可能在黑客社区中看起来是正常的，而_你_将被视为有错的一方，这将伤害到你获取信息或帮助的机会。 另一方面，你偶而真的会碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击，用犀利的语言将其驳得体无完肤都是可以接受的。然而，在行事之前一定要非常非常的有根据。纠正无礼的言论与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外人，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘上以免冒险。 （有些人断言很多黑客都有轻度的自闭症或亚斯伯格综合症，缺少用于润滑人类社会正常交往所需的神经。这既可能是真也可能是假的。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我们的古怪行为。只管这么干好了，我们不在乎。我们_喜欢_我们现在这个样子，并且通常对病患标记都有站得住脚的怀疑。） 在下一节，我们会谈到另一个问题，当_你_行为不当时所会受到的冒犯。 如何避免扮演失败者在黑客社区的论坛中有那么几次你可能会搞砸 – 以本指南所描述到的或类似的方式。而你会在公开场合中被告知你是如何搞砸的，也许攻击的言语中还会带点夹七夹八的颜色。 这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被口头攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、忘了关马桶盖等等。相反地，你该这么做： 熬过去，这很正常。事实上，它是有益健康且合理的。 社区的标准不会自行维持，它们是通过参与者积极而公开地执行来维持的。不要哭嚎所有的批评都应该通过私下的邮件传送，它不是这样运作的。当有人评论你的一个说法有误或者提出不同看法时，坚持声称受到个人攻击也毫无益处，这些都是失败者的态度。 也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称如果你不想帮助用户就闭嘴。 结果造成有想法的参与者纷纷离开，这么做只会使它们沦为毫无意义的嘮叨与无用的技术论坛。 夸张的讲法是：你要的是友善（以上述方式）还是有用？两个里面挑一个。 记着：当黑客说你搞砸了，并且（无论多么刺耳）告诉你别再这样做时，他正在为关心你和他的社区而行动。对他而言，不理你并将你从他的生活中滤掉更简单。如果你无法做到感谢，至少要表现地有点尊严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人像对待脆弱的洋娃娃那样对你。 有时候，即使你没有搞砸（或者只是在他的想像中你搞砸了），有些人也会无缘无故地攻击你本人。在这种情况下，抱怨倒是_真的_会把问题搞砸。 这些来找麻烦的人要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理专家。其它读者要么不理睬，要么用自己的方式对付他们。这些来找麻烦的人在给他们自己找麻烦，这点你不用操心。 也别让自己卷入口水战，最好不要理睬大多数的口水战 – 当然，是在你检验它们只是口水战，而并未指出你有搞砸的地方，且也没有巧妙地将问题真正的答案藏于其后（这也是有可能的）。 不该问的问题以下是几个经典蠢问题，以及黑客没回答时心中所想的： 问题：我能在哪找到 X 程序或 X 资源？ 问题：我怎样用 X 做 Y？ 问题：如何设定我的 shell 提示？ 问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？ 问题：我的程序/设定/SQL语句没有用 问题：我的 Windows 电脑有问题，你能帮我吗？ 问题：我的程序不会动了，我认为系统工具 X 有问题 问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？ 问题：我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？ 问题：我能在哪找到 X 程序或 X 资源？ 回答：就在我找到它的地方啊，白痴 – 搜索引擎的那一头。天哪！难道还有人不会用 Google 吗？ 问题：我怎样用 X 做 Y？ 回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对 Y 要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种人，等他们把问题搞清楚了再说。 问题：如何设定我的 shell 提示？？ 回答：如果你有足够的智慧提这个问题，你也该有足够的智慧去 RTFM，然后自己去找出来。 问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？ 回答：试试看就知道了。如果你试过，你既知道了答案，就不用浪费我的时间了。 问题：我的程序/设定/SQL语句没有用 回答：这不算是问题吧，我对要我问你二十个问题才找得出你真正问题的问题没兴趣 – 我有更有意思的事要做呢。在看到这类问题的时候，我的反应通常不外如下三种 你还有什么要补充的吗？ 真糟糕，希望你能搞定。 这关我有什么屁事？ 问题：我的 Windows 电脑有问题，你能帮我吗？ 回答：能啊，扔掉萎软的垃圾，换个像 Linux 或 BSD 的开放源代码操作系统吧。 注意：如果程序有官方版 Windows 或者与 Windows 有互动（如Samba），你_可以_问与Windows相关的问题， 只是别对问题是由 Windows 操作系统而不是程序本身造成的回复感到惊讶， 因为 Windows 一般来说实在太烂，这种说法通常都是对的。 问题：我的程序不会动了，我认为系统工具 X 有问题 回答：你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与函数库档案有明显缺陷的人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚而详尽的缺陷说明文件作后盾。 问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？ 回答：不能，我只有亲自在你的电脑上动手才能找到毛病。还是去找你当地的 Linux 使用群组者寻求实际的指导吧（你能在这儿找到使用者群组的清单）。 注意：如果安装问题与某 Linux 的发行版有关，在它的邮件列表、论坛或本地使用者群组中提问也许是恰当的。此时，应描述问题的准确细节。在此之前，先用 Linux 和_所有_被怀疑的硬件作关键词仔细搜索。 问题：我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？ 回答：想要这样做，说明了你是个卑鄙小人；想找个黑客帮你，说明你是个白痴！ 好问题与蠢问题最后，我将透过举一些例子，来说明怎样聪明的提问；同一个问题的两种问法被放在一起，一种是愚蠢的，另一种才是明智的。 蠢问题： 我可以在哪儿找到关于 Foonly Flurbamatic 的资料？ 这种问法无非想得到 STFW 这样的回答。 聪明问题： 我用Google搜索过 “Foonly Flurbamatic 2600”，但是没找到有用的结果。谁知道上哪儿去找对这种设备编程的资料？ 这个问题已经 STFW 过了，看起来他真的遇到了麻烦。 蠢问题 我从 foo 项目找来的源码没法编译。它怎么这么烂？ 他觉得都是别人的错，这个傲慢自大的提问者 聪明问题 foo 项目代码在 Nulix 6.2 版下无法编译通过。我读过了 FAQ，但里面没有提到跟 Nulix 有关的问题。这是我编译过程的记录，我有什么做的不对的地方吗？ 提问者已经指明了环境，也读过了FAQ，还列出了错误，并且他没有把问题的责任推到别人头上，他的问题值得被关注。 蠢问题 我的主机板有问题了，谁来帮我？ 某黑客对这类问题的回答通常是：好的，还要帮你拍拍背和换尿布吗？，然后按下删除键。 聪明问题 我在 S2464 主机板上试过了 X 、 Y 和 Z ，但没什么作用，我又试了 A 、 B 和 C 。请注意当我尝试 C 时的奇怪现象。显然 florbish 正在 grommicking，但结果出人意料。通常在 Athlon MP 主机板上引起 grommicking 的原因是什么？有谁知道接下来我该做些什么测试才能找出问题？ 这个家伙，从另一个角度来看，值得去回答他。他表现出了解决问题的能力，而不是坐等天上掉答案。 在最后一个问题中，注意告诉我答案和给我启示，指出我还应该做什么诊断工作之间微妙而又重要的区别。 事实上，后一个问题源自于 2001 年 8 月在 Linux 内核邮件列表（lkml）上的一个真实的提问。我（Eric）就是那个提出问题的人。我在 Tyan S2464 主板上观察到了这种无法解释的锁定现象，列表成员们提供了解决这一问题的重要信息。 通过我的提问方法，我给了别人可以咀嚼玩味的东西；我设法让人们很容易参与并且被吸引进来。我显示了自己具备和他们同等的能力，并邀请他们与我共同探讨。通过告诉他们我所走过的弯路，以避免他们再浪费时间，我也表明了对他们宝贵时间的尊重。 事后，当我向每个人表示感谢，并且赞赏这次良好的讨论经历的时候， 一个 Linux 内核邮件列表的成员表示，他觉得我的问题得到解决并非由于我是这个列表中的_名人_，而是因为我用了正确的方式来提问。 黑客从某种角度来说是拥有丰富知识但缺乏人情味的家伙；我相信他是对的，如果我_像_个乞讨者那样提问，不论我是谁，一定会惹恼某些人或者被他们忽视。他建议我记下这件事，这直接导致了本指南的出现。 如果得不到回答如果仍得不到回答，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。 总的来说，简单的重复张贴问题是个很糟的点子。这将被视为无意义的喧闹。有点耐心，知道你问题答案的人可能生活在不同的时区，可能正在睡觉，也有可能你的问题一开始就没有组织好。 你可以通过其他渠道获得帮助，这些渠道通常更适合初学者的需要。 有许多网上的以及本地的使用者群组，由热情的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。 另外，你可以向很多商业公司寻求帮助，不论公司大还是小。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了– 完全可能如此 –你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。 对像是 Linux 这种大众化的软件，每个开发者至少会对应到上万名使用者。根本不可能由一个人来处理来自上万名使用者的求助电话。要知道，即使你要为这些协助付费，和你所购买的同类软件相比，你所付出的也是微不足道的（通常封闭源代码软件的技术支持费用比开放源代码软件的要高得多，且内容也没那么丰富）。 如何更好地回答问题态度和善一点。问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。 对初犯者私下回复。对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找常见问题都不知道。 如果你不确定，一定要说出来！一个听起来权威的错误回复比没有还要糟，别因为听起来像个专家很好玩，就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。 如果帮不了忙，也别妨碍他。不要在实际步骤上开玩笑，那样也许会毁了使用者的设置 –有些可怜的呆瓜会把它当成真的指令。 试探性的反问以引出更多的细节。如果你做得好，提问者可以学到点东西 –你也可以。试试将蠢问题转变成好问题，别忘了我们都曾是新手。 尽管对那些懒虫抱怨一声 RTFM 是正当的，能指出文件的位置（即使只是建议个 Google 搜索关键词）会更好。 如果你决定回答，就请给出好的答案。当别人正在用错误的工具或方法时别建议笨拙的权宜之计（wordaround），应推荐更好的工具，重新界定问题。 正面的回答问题！如果这个提问者已经很深入的研究而且也表明已经试过 X 、 Y 、 Z 、 A 、 B 、 C 但没得到结果，回答 试试看 A 或是 B 或者 试试X 、 Y 、 Z 、 A 、 B 、 C 并附上一个链接一点用都没有。 帮助你的社区从问题中学习。当回复一个好问题时，问问自己如何修改相关文件或常见问题文件以免再次解答同样的问题？，接着再向文件维护者发一份补丁。 如果你是在研究一番后才做出的回答，展现你的技巧而不是直接端出结果。毕竟授人以鱼不如授人以渔。 相关资源如果你需要个人电脑、Unix 系统和网络如何运作的基础知识，参阅Unix系统和网络基本原理。 当你发布软件或补丁时，试着按软件发布实践操作。 鸣谢Evelyn Mitchel贡献了一些愚蠢问题例子并启发了编写如何更好地回答问题这一节， Mikhail Ramendik贡献了一些特别有价值的建议和改进。]]></content>
  </entry>
  <entry>
    <title><![CDATA[《程序员练级攻略》读后简记]]></title>
    <url>%2F2018%2F07%2F05%2F%E3%80%8A%E7%A8%8B%E5%BA%8F%E5%91%98%E7%BB%83%E7%BA%A7%E6%94%BB%E7%95%A5%E3%80%8B%E8%AF%BB%E5%90%8E%E7%AE%80%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[其实早在几年前，我就在 Coolshell 博客上阅读过《程序员练级攻略》，当时也根据耗子老师的一些练级攻略和建议逐步学习过一些内容，遗憾的是并没有非常彻底的依照学习大纲脚踏实地的学习。当我有幸了解到升级版的《程序员练级攻略》后，就果断订阅了专栏，没错，我就是为了这个升级版的练级攻略订阅的专栏。于我而言，《程序员练级攻略》这个主题已是物超所值，值回票价，更何况还附有大量高级的技术分享可待后续研习。 升级版的《程序员练级攻略》不仅在内容上有了大量的充实和更新，在总体结构上也较之前更为清晰和更具层次，不论对于入门还是高级阶段的程序员而言都颇具价值和指导意义。虽然我并未一个纯粹的程序员，但在日常工作中或是工作之余都或多或少需要接触一些代码。在我看来，代码会是我工作中的增值能力，更是未来的职业生涯中不可或缺的能力。时隔多年后，再次阅读练级攻略也是收获颇多，甚至说比之前的收获更大，因为有了过往的学习经验和教训才深知其价值所在。以下分享我对耗子老师文章中提到的几点建议的一些感悟。 一定要坚持，要保持长时间学习，甚至终生学习的态度。 这一点非常重要，于我自身而言常常是阶段性的集中学习，虽然短期效果可观，但长期来看能真正留下的东西并不多。学习重在循序渐进，持续不断，积少成多，切记不要妄想一口能吃成个大胖子。 一定要动手，不管例子多么简单，建议至少自己动手敲一遍看看是否理解了里头的细枝末节。 动手在学习编程来说是简单而又复杂的。简单在于有时候你甚至只需要“抄写”示例代码即可，复杂在于它简单到有一大部分人竟然会忽视它的重要性和有效性。光看不练假把式，很容易想当然学习，自以为自己看懂了和想明白了，实则对于其中的细枝末节却并未真正理解和掌握。对于这一点，也是我之后在学习过程中需要重点加强的，不要因为太复杂而不敢动手练，更不要因为过于简单而不屑于动手写。 一定要学会思考，思考为什么要这样，而不是那样。还要举一反三地思考。 学会思考也许是会伴随着整个学习过程需要不断学习的技能，要明白的是思考也是可以习得的，在学习新知识点的时候多问自己为什么要这样，而不是那样，有时候看似“愚蠢”的反问可能恰恰蕴藏着这个知识点背后的历史背景和内在原理。 不要乱买书，不要乱追技术新名词，基础的东西经过很长时间积累，会在未来至少 10 年通用。 乱买书是我长期以来的一大恶习。套用那句俗套的话来说，买书如山倒，读书如抽丝。买书会给人造成一种爱学习的假象，同样可能会有一种买了书就学会了的错觉。在今后学习中，需要尽量克制住自己买书的冲动，尤其是在各大电商促销（6.18 和 11.11）时的批量购买。就我之前的经历来说，往往这时候会买到一批无用的书籍（至少在当前是无用的，也许未来会有用，但那时书中内容可能就过时了）。要明白一个道理，好书总归是少的，真正的好书和经典其实就那么一小部分。好书并不一定是最畅销的书，但一定会是长销的书（往往是已经卖了几十年，出了若干版，重印了几十次）。对于另一点乱追技术名词，这点我自身感触不算深。但近几年人工智能和深度学习的过热正是这点的真实写照，可能不管哪个领域都或多或少会和人工智能去靠，各个岗位都会去学点人工智能相关的知识点和技术栈。我个人的经验是可以通过培训机构提供的培训课程来判断，通常技术新名词出现之后往往最直接会反映到培训机构中去，比如现在就有数不胜数的在线培训机构提供人工智能、机器学习和深度学习相关的课程。 回顾一下历史，看看历史时间线上技术的发展，你才能明白明天会是什么样的。 最后一点，回顾历史可以让我们从一个大的时间尺度上去看待技术的发展和演变，而不是执着于于某一个技术点。正所谓，以史为鉴可知兴衰，了解技术发展史也是同样的道理。同样，通过回顾历史你也会发现哪些技术是真正的基础和核心，会在可预见的将来依然是通用的。回顾历史可以作为我们在学习道路上的指南针，在你迷惘不知所措时给你指明未来的前进方向，保持初心。 以上只是我个人对于耗子老师几点建议的感悟，仅以此作为我今后技术精进路上的警醒。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F07%2F05%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
